[
    {
        "substitutions": {
            "零": "零",
            "补": "补",
            "短": "较短"
        },
        "simplified_text": "重叠-储存法，又称Overlap-save method或Overlap-discard method，是一种区块卷积，能够有效计算长信号与有限冲激响应滤波器的离散折积。其中滤波器系数在指定长度之外为零。与重叠-相加法不同，该方法输出区块不重叠，减少相加步骤。每次读取输入后，需存储重叠部分作下一区块开头，故称“重叠-储存法”。此外，它也不需要补零。我们选择较短长度切割输出信号，因滤波器长度有限，某一区块信号仅由较长的输入区块决定。计算有影响的输入区块与滤波器系数的乘积，选取适当结果即得正确输出区块。对于公式4中的n，输出信号可以表示为n在公式7的y[n]部分。因此，每段输出区块的前几个点可以丢弃。",
        "version": 2,
        "original": "重叠-储存法，又称Overlap-save method或Overlap-discard method，是一种区块卷积（block convolution），能够有效计算长信号与有限冲激响应滤波器的离散折积。其中滤波器系数在指定长度之外为零。与重叠-相加法不同，该方法输出区块不重叠，减少相加步骤。每次读取输入后，需存储重叠部分作下一区块开头，故称“重叠-储存法”。此外，它也不需要补零。我们选择较短长度切割输出信号，因滤波器长度有限，某一区块信号仅由较长的输入区块决定。计算有影响的输入区块与滤波器系数的乘积，选取适当结果即得正确输出区块。对于公式4中的n，输出信号可以表示为n在公式7的y[n]部分。因此，每段输出区块的前几个点可以丢弃。",
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "零": "",
            "补": ""
        },
        "simplified_text": "虽然一时看不出将 'x[n]' 延伸周期的好处，但 'formula_10' 和 'formula_11' 在 'formula_7' 部分相等。因此可以用 'formula_13' 点圆周折积来计算线性折积，输出 'y[n]' 在 'formula_4' 的部分。因为每段 'x[n]' 本身就足够长，所以选择 'formula_17' 时，输入 'x[n]' 就不需要补充零。通过圆周折积计算和定理转换，每段运算量从 'O(N)' 降低到 'O(N log N)'，实现 'formula_13' 点快速傅立叶变换和 'formula_13' 次乘法，速度显著提升。当 'x[n]' 的长度 'N' 和 'h[n]' 的长度 'M' 差距很大，尤其是 'M' 小于 'N' 的对数时，直接折积（无需圆周折积和 FFT）会更加快速。当 'N' 和 'M' 同级时，无需分割。只需用长度为 'N' 的一个区块进行 FFT。当 'N' 比 'M' 大很多，但不是很多时，需要选择区块长度 'L'。除了与 'N' 和 'M' 相关，还要考虑当两者相除有余数时，剩余一小段输入可能造成浪费。",
        "version": 2,
        "original": "虽然一时看不出将 'x[n]' 延伸周期的好处，但 'formula_10' 和 'formula_11' 在 'formula_7' 部分相等。因此可以用 'formula_13' 点圆周折积来计算线性折积，输出 'y[n]' 在 'formula_4' 的部分。因为每段 'x[n]' 本身就足够长，所以选择 'formula_17' 时，输入 'x[n]' 就不需要补零。通过圆周折积计算和定理转换，每段运算量从 'O(N)' 降低到 'O(N log N)'，实现 'formula_13' 点快速傅立叶变换和 'formula_13' 次乘法，速度显著提升。当 'x[n]' 的长度 'N' 和 'h[n]' 的长度 'M' 差距很大，尤其是 'M' 小于 'N' 的对数时，直接折积（无需圆周折积和 FFT）会更加快速。当 'N'' 和 'M' 同级时，无需分割。只需用长度为 'N'' 的一个区块进行 FFT。当 'N'' 比 'M' 大很多，但不是很多时，需要选择区块长度 'L'。除了与 'N'' 和 'M' 相关，还要考虑当两者相除有余数时，剩余一小段输入可能造成浪费。",
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "补": "补",
            "每": "每",
            "较": "较",
            "与": "与",
            "段": "段",
            "将": "将",
            "称": "称"
        },
        "simplified_text": "Overlap-save method，又称Overlap-discard method，是一种区块卷积。它能有效计算长信号与有限冲激响应滤波器的离散折积。滤波器系数在指定长度外为零。\n与Overlap-add method不同，Overlap-save method输出区块不重叠，减少了相加步骤。读取输入后，存储存款和储蓄的相同部分作为下一区块的起始，这方法叫做‘重叠-储存法’。此外，它也不需要补零。\n输出信号采用较短长度切割，因滤波器长度有限，信号区块由较长输入区块决定。计算输入区块与滤波器系数的乘积，选取适当结果便得到正确的输出区块。\n对于公式4中的n，输出信号可以表示为公式7的y[n]部分。因此，每段输出区块的前几个点可以丢弃。\n虽然看不出将 'x[n]' 延伸周期的益处，但 'formula_10' 和 'formula_11' 在 'formula_7' 的部分是相等的。因此，可以用 'formula_13' 的圆形轨迹折积来计算线性折积，从而得到 'y[n]' 在 'formula_4' 的部分。\n因为每段 'x[n]' 本身就足够长，所以选择 'formula_17' 时，输入 'x[n]' 就不需要补充零。通过圆形轨迹折积计算和定理转换，运算量从 'O(N)' 降低到 'O(N log N)'，这显著提升了 'formula_13' 点快速傅立叶变换和 'formula_13' 次乘法的速度。",
        "version": 3,
        "original": "Overlap-save method，又称Overlap-discard method，是一种区块卷积。它能有效计算长信号与有限冲激响应滤波器的离散折积。滤波器系数在指定长度外为零。\n 与Overlap-add method不同，Overlap-save method输出区块不重叠，减少了相加步骤。读取输入后，存储存款和储蓄的相同部分作为下一区块的起始，这方法叫做‘重叠-储存法’。此外，它也不需要补零。\n 输出信号采用较短长度切割，因滤波器长度有限，信号区块由较长输入区块决定。计算输入区块与滤波器系数的乘积，选取适当结果便得到正确的输出区块。\n 对于公式4中的n，输出信号可以表示为公式7的y[n]部分。因此，每段输出区块的前几个点可以丢弃。\n虽然看不出将 'x[n]' 延伸周期的益处，但 'formula_10' 和 'formula_11' 在 'formula_7' 的部分是相等的。因此，可以用 'formula_13' 的圆形轨迹折积来计算线性折积，从而得到 'y[n]' 在 'formula_4' 的部分。\n因为每段 'x[n]' 本身就足够长，所以选择 'formula_17' 时，输入 'x[n]' 就不需要补充零。通过圆形轨迹折积计算和定理转换，运算量从 'O(N)' 降低到 'O(N log N)'，这显著提升了 'formula_13' 点快速傅立叶变换和 'formula_13' 次乘法的速度。",
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "段": "分",
            "需": "要",
            "与": "及"
        },
        "simplified_text": "当 'x[n]' 的长度 N 与 'h[n]' 的长度 M 差距较大，尤其是 M 小于 N 的对数时，直接进行折积（无需圆形轨迹折积和 FFT）会更快速。当 N 和 M 同级时，无需分割。只需使用长度为 N 的一个区块进行 FFT。当 N 比 M 大很多，但不是很多时，需要选择区块长度 'L'。在决定 'L' 时，除了与 N 和 M 相关，还需考虑当两者相除有余数时，剩余一小段输入可能造成浪费。",
        "version": 3,
        "original": "当 'x[n]' 的长度 N 与 'h[n]' 的长度 M 差距较大，尤其是 M 小于 N 的对数时，直接进行折积（无需圆形轨迹折积和 FFT）会更快速。当 N 和 M 同级时，无需分割。只需使用长度为 N 的一个区块进行 FFT。当 N 比 M 大很多，但不是很多时，需要选择区块长度 'L'。在决定 'L' 时，除了与 N 和 M 相关，还需考虑当两者相除有余数时，剩余一小段输入可能造成浪费。",
        "chunk_num": 2,
        "type": "Wiki"
    }
]