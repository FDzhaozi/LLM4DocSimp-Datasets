[
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "非确定型图灵机与确定型图灵机不同，因为计算过程中，机器根据当前状态和读写头读取的符号，有多种状态转移选择。机器会随机选择一种方案继续运行，直到停机。",
        "original": "非确定型图灵机和确定型图灵机的不同之处在于，在计算的每一时刻，根据当前状态和读写头所读的符号，机器存在多种状态转移方案，机器将任意地选择其中一种方案继续运作，直到最后停机为止。",
        "version": 1,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分"
        ],
        "simplified_text": "formula_2是状态集合，formula_3是带字母表，formula_4分别表示读写头向左和向右移动；符号formula_5表示formula_6的幂集。",
        "original": "其中formula_2是状态集合，formula_3是带字母表，formula_4分别表示读写头向左和向右移动；符号formula_5 表示集合formula_6的幂集，即",
        "version": 1,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "例如，若非确定型图灵机当前状态为formula_9，读写头所读符号为formula_10，则",
        "original": "例如，设非确定型图灵机formula_8的当前状态为formula_9，当前读写头所读的符号为formula_10，若",
        "version": 1,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "不确定型图灵机的计算步骤可以表示成树状结构。树的每一分支代表一种计算可能性。",
        "original": "不确定型图灵机在输入串上的计算步骤可以表示为树状结构，树的不同分支代表每一步的不同可能性。",
        "version": 1,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分"
        ],
        "simplified_text": "图灵机只要有一个分支达到接受状态，就接受该输入串；若达到拒绝状态，则拒绝。",
        "original": "只要有一个分支达到接受状态，就称该图灵机接受该输入串；若达到拒绝状态，则称拒绝。",
        "version": 1,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "图灵机在某输入串上能停止的条件是，哪怕有些分支可能永远无法停止，只要有一个分支进入接受或拒绝状态即可。",
        "original": "有些分支可能永远无法停止，但只要有一个分支能够达到接受或拒绝状态，我们就说图灵机在该输入串上能够停止。",
        "version": 1,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "因为不确定型图灵机的计算步骤是树状结构，所以只需游历这棵树即可模拟其计算步骤。",
        "original": "证明：因为不确定型图灵机的计算步骤就是树状结构，所以只需游历这棵树就能模拟其计算步骤。",
        "version": 1,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "想用深度优先搜索游历计算树，但这不可行。因为有些计算分支可能永远不会停止！",
        "original": "一个简单的想法是使用深度优先搜索来游历计算树，但这样不可行，因为有些计算分支可能永远不停止！",
        "version": 1,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分"
        ],
        "simplified_text": "对于非确定型机器的表达式8，构造确定型机器26。若表达式8有可停机的分支，则26也能找到并停机。",
        "original": "对于非确定型机器的表达式8，构造一个确定型机器26如下：显然，若表达式8有某个分支可以停机，则此26也一定会找到该分支并停机。",
        "version": 1,
        "chunk_num": 3,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "命题2：若非确定型机器8在多项式时间内接受语言L，则存在P多项式。该多项式使得语言L能被时间复杂度为43的确定型机器程序接受。",
        "original": "命题2：如果语言L被非确定型机器8在多项式时间接受，则一定存在P多项式使得语言L被时间复杂度表达式43的确定型机器程序所接受。",
        "version": 1,
        "chunk_num": 3,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "它的状态转移规则包括状态集合、字符集和读取头的左右移动规则。字符集的符号表示其所有子集。",
        "original": "具体来说，它的状态转移规则包括状态集合、字符集，以及读取头左右移动的规则；符号表示字符集的所有子集。",
        "version": 2,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分"
        ],
        "simplified_text": "非确定型图灵机在当前状态和读取字符确定后，会随机选择一个子集操作，再进行下一步计算。",
        "original": "例如，如果非确定型图灵机当前状态和读取头所读字符，它会随机选择一个子集进行操作，然后进入下一步计算。",
        "version": 2,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "调整语序"
        ],
        "simplified_text": "图灵机在某输入序列上能停止，条件是只要有一个分支进入接受或拒绝状态，即使有些分支可能永远无法停止。",
        "original": "图灵机在某输入序列上能停止的条件是，有些分支可能永远无法停止，只要有一个分支进入接受或拒绝状态即可。",
        "version": 2,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分"
        ],
        "simplified_text": "由于不确定图灵机的计算过程是状态树，因此只需遍历这棵树就能模拟其计算过程。",
        "original": "因为不确定图灵机的计算过程是状态树，所以只需遍历这棵树即可模拟其计算过程。",
        "version": 2,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "转换句式"
        ],
        "simplified_text": "非确定型图灵机实际上是确定型图灵机，但在计算方法上与确定型图灵机有区别。",
        "original": "非确定型图灵机通常指的是确定型图灵机，但它在计算时与后者不同。",
        "version": 3,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "调整语序"
        ],
        "simplified_text": "图灵机在某输入序列上，若有一个分支达到接受状态，则接受该序列；若达到拒绝状态，则拒绝。",
        "original": "图灵机在某输入序列上能停止的条件是，只要有一个分支达到接受状态，就接受该输入序列；如果达到拒绝状态，就拒绝。",
        "version": 3,
        "chunk_num": 1,
        "type": "Wiki"
    }
]