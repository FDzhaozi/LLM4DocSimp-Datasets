[
    {
        "simp_type": [
            "拆分",
            "添加过渡"
        ],
        "simplified_text": "非确定型图灵机通常指的是确定型图灵机，但它在计算时有别于后者。非确定型图灵机有多种状态转移选择，会随机选择一种方案继续运行，直到停机。\n\n  其状态转移规则包括状态集合、字符集和读取头的左右移动规则。字符集的符号表示其所有子集。在确定当前状态和读取字符后，非确定型图灵机会随机选择一个子集操作，然后进行下一步计算。",
        "original": "非确定型图灵机通常指的是确定型图灵机。它与确定型图灵机不同，计算时机器有多种状态转移选择，会随机选择一种方案继续运行，直到停机。它的状态转移规则包括状态集合、字符集和读取头的左右移动规则。字符集的符号表示其所有子集。非确定型图灵机在当前状态和读取字符确定后，会随机选择一个子集操作，再进行下一步计算。",
        "version": 2,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "添加过渡"
        ],
        "simplified_text": "不确定图灵机的计算过程可以表示成状态树。在这个树中，每个分支代表一种计算可能性。图灵机在某输入序列上能停止的条件是，只要有一个分支达到接受状态，就接受该输入序列；如果达到拒绝状态，则拒绝。值得注意的是，图灵机必须无冲突，即不能同时接受和拒绝同一个输入序列。\n\n  对于任意一个不确定图灵机，存在一个与之语言相等的确定图灵机。由于不确定图灵机的计算过程是状态树，因此理论上只需遍历这棵树就能模拟其计算过程。但直接使用深度优先遍历状态树不可行，因为有些计算分支可能永远不会停止。\n\n  因此，我们可以使用一种称为迭代加深搜索的算法来遍历状态树。关于这种方法的具体证明，请参考以下内容：",
        "original": "不确定图灵机的计算过程可以表示成状态树。树中的每个分支代表一种计算可能。只要有一个分支达到接受状态，就接受输入序列；达到拒绝状态，则拒绝。图灵机在某输入序列上能停止，条件是只要有一个分支进入接受或拒绝状态，即使有些分支可能永远无法停止。注意，图灵机必须无冲突，即不能同时接受和拒绝同一个输入序列。对于任意一个不确定图灵机，存在一个与之语言相等的确定图灵机。由于不确定图灵机的计算过程是状态树，因此只需遍历这棵树就能模拟其计算过程。想用深度优先遍历遍历状态树，但这不可行。因为有些计算分支可能永远不会停止！因此，我们可以使用一种在算法中称为迭代加深搜索方法来遍历状态树。具体证明如下：",
        "version": 2,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "拆分",
            "添加过渡"
        ],
        "simplified_text": "对于不确定型机器的表达式8，我们构造了确定型机器26。如果表达式8有能停机的分支，则26也能找到并停机。由此，我们得出结论。\n\n  命题2表明：如果不确定型机器8能在多项式时间内接受语言L，那么存在一个P多项式。这个多项式使得语言L可以被时间复杂度为43的确定型机器程序接受。\n\n  命题2说明了为什么在证明P = NP之前，所有的NPC问题都只有指数算法。",
        "original": "对于不确定型机器的表达式8，构造确定型机器26。如果表达式8有能停机的分支，则26也能找到并停机。因此得出结论。命题2：如果不确定型机器8在多项式时间内接受语言L，则存在P多项式。该多项式使得语言L能被时间复杂为43的确定型机器程序接受。命题2说明了为什么在证明P = NP之前，所有的NPC问题都只有指数算法。",
        "version": 2,
        "chunk_num": 3,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "冗余删除",
            "添加标题"
        ],
        "simplified_text": "## 非确定型图灵机概述\n\n非确定型图灵机与确定型图灵机在计算方法上不同，具有多种状态转移选择，会随机选择一种方案运行，直到停机。其状态转移规则涉及状态集合、字符集和读取头的移动规则。在确定状态和读取字符后，非确定型图灵机会随机选择子集操作继续计算。计算过程可用状态树表示，每个分支代表一种计算可能性。图灵机在某输入序列上，若分支达到接受状态，则接受序列；若达到拒绝状态，则拒绝。图灵机不会同时接受和拒绝同一个输入序列。",
        "original": "非确定型图灵机实际上是确定型图灵机，但在计算方法上与确定型图灵机有区别。非确定型图灵机有多种状态转移选择，会随机选择一种方案继续运行，直到停机。其状态转移规则包括状态集合、字符集和读取头的左右移动规则。字符集的符号表示其所有子集。在确定当前状态和读取字符后，非确定型图灵机会随机选择一个子集操作，然后进行下一步计算。不确定图灵机的计算过程可以表示成状态树。在这个树中，每个分支代表一种计算可能性。图灵机在某输入序列上，若有一个分支达到接受状态，则接受该序列；若达到拒绝状态，则拒绝。值得注意的是，图灵机不能同时接受和拒绝同一个输入序列。",
        "version": 3,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "simp_type": [
            "冗余删除",
            "添加标题"
        ],
        "simplified_text": "## 不确定机器与确定机器的关系\n\n对于任意不确定机器，存在一个与之语言相等的确定机器。由于不确定机器的计算过程是计算树，理论上只需遍历这棵树来模拟其计算过程。但直接使用深度优先遍历不可行，因为某些计算分支可能无限进行。迭代加深搜索算法可以解决这个问题。关于这种方法的具体证明，请参考相关内容。\n\n命题2表明，如果不确定型机器能在多项式时间内接受语言L，那么存在一个P多项式，使得语言L可以被时间复杂度为43的确定型机器程序接受。这一命题解释了为什么在证明P=NP之前，所有的NPC问题都只有指数级算法。",
        "original": "对于任意一个不确定机器，存在一个与之语言相等的确定机器。由于不确定机器的计算过程是计算树，因此理论上只需遍历这棵树就能模拟其计算过程。但直接使用深度优先遍历计算树不可行，因为有些计算分支可能永远不会停止。因此，我们可以使用一种称为迭代加深搜索算法的方法来遍历计算树。关于这种方法的具体证明，请参考以下内容：对于不确定型机器的表达式8，我们构造了确定型机器26。如果表达式8有能停机的分支，则26也能找到并停机。由此，我们得出结论。命题2表明：如果不确定型机器8能在多项式时间内接受语言L，那么存在一个P多项式。这个多项式使得语言L可以被时间复杂度为43的确定型机器程序接受。命题2说明了为什么在证明P=NP之前，所有的NPC问题都只有指数级算法。",
        "version": 3,
        "chunk_num": 2,
        "type": "Wiki"
    }
]