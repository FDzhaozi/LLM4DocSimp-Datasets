JTA(机构名)是一个Java企业应用接口，允许Java环境完成跨越多个XA资源的分布式交易。JTA(机构名)是Java社区制定的JSR 907规范。它提供事务监控器协调跨数据库和消息队列等资源的事务。每个资源有自己的管理器。资源管理器通常有自己的API，如JDBC。资源适配器帮助协调分布式事务。应用通过资源API与资源交互，修改资源。JTA(机构名) API包括两个Java包下的类。JTA(机构名)基于XA体系结构，定义了两种事务边界API，供EJB应用服务器和应用组件使用。

为了通过事务管理器管理，JTA架构(框架结构)要求每个资源管理器实现接口。如前面所说，每个资源都有自己的特定API，例如：Java事务API由三个部分组成。javax.transaction.UserTransaction接口让应用程序可以编程(编制程序)控制事务边界，它可供Java客户端程序或EJB使用。UserTransaction的begin方法开始一个全局事务，并与调用线程关联。事务到线程的管理由事务管理器完成，对应用程序来说是透明的。对嵌套事务的支持不是必须的。如果调用线程的环境已经与事务关联，并且事务管理器的实现不支持嵌套事务，UserTransaction的begin方法调用时将抛出NotSupportedException。底层的事务管理器实现负责在不同应用程序间传播事务环境，事务管理器位于客户端和服务器计算机上。传播的事务环境格式由客户端和服务器计算机协商确定。例如，如果事务管理器是JTS规范的实现，将使用CORBA OTS 1.1规范中描述的事务环境传播格式。事务环境的传播对应用程序来说是透明的。

EJB服务器需要支持UserTransaction(机构名)接口，以便Bean(机构名)管理事务的EJB使用。通过EJBContext的getUserTransaction(机构名)方法，EJB单元可以获取到UserTransaction(机构名)接口。这样，EJB应用程序不需要直接与事务管理器交互，就可以确定事务边界。而是依赖于EJB服务器提供EJB规范中定义的所有事务处理。（EJB服务器和事务管理器之间的互动对应用是透明的。实现事务管理的责任在EJB容器和服务提供商。）
下面举例说明Bean(机构名)管理事务的会话Bean(机构名)如何使用UserTransaction(机构名)：
如果环境中安装了JTA(机构名)的实现，可以从codice_1获取UserTransaction(机构名)。
要使用JTA(机构名)或UserTransaction(机构名)的功能，应用服务器并非必需。现在有独立的JTA(机构名)实现，这使得普通的Java应用程序也能利用JTA(机构名)/XA的可靠性。特别是在与Spring工具一起使用时，这为开发可靠的Java应用程序提供了不同的方法。
到2010年4月，JTA(机构名)的开源实现有：
以上所有事务管理器都可以在J2SE环境中使用。

