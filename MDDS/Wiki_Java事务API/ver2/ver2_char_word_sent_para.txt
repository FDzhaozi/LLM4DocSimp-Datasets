JTA是一个Java企业应用接口，它允许Java环境完成跨越多个XA资源的分布式交易。JTA由Java社区制定的JSR 907规范。该接口提供事务监控器，用于协调数据库和消息队列等资源的事务。每个资源都有其管理器，通常有自己的API，如JDBC。资源适配器负责协调分布式事务。应用通过资源API与资源交互，进行修改。JTA API包括两个Java包下的类。JTA基于XA体系结构，定义了两种事务边界API，供EJB应用服务器和应用组件使用。

为了通过事务管理者进行管理，JTA规范要求每个资源实现特定的接口。例如，Java事务接口由三部分组成。UserTransaction接口允许应用程序控制事务范围，它适用于Java客户端或EJB。begin方法用于启动全局事务，并与调用线程绑定。事务与线程的管理由事务管理者负责，这一过程对应用程序来说是透明的。嵌套事务不是必需的。如果线程环境与事务关联，但事务管理者不支持嵌套事务，调用begin方法将引发不支持异常。

  底层事务管理者负责在不同应用间传播事务上下文，位于客户端和服务器上。事务上下文的传播由客户端和服务器协商确定。若事务管理者遵循JTS规范，则采用CORBA OTS 1.1规范描述的事务上下文传播格式。这一传播过程对应用程序来说是透明的。

企业JavaBeans服务器需要支持用户事务接口，以便Bean对象管理事务。通过EJB上下文的getUserTransaction方法，EJB组件可以获取到用户事务接口，这样应用程序无需直接与事务管理器交互，而是依赖EJB服务器提供的事务处理。EJB服务器与事务管理器的交互对应用是透明的。

  举例来说，会话Bean对象如何使用用户事务来管理事务。若环境中安装了Java事务API的实现，可从相关位置获取用户事务接口。Java应用程序使用Java事务API或用户事务的功能时，应用服务器并非必需。Java应用程序可以利用独立的Java事务API实现，该实现基于Java事务API/XA的可靠性。

  使用Spring工具时，提供了多种开发可靠Java应用程序的方法。到2010年4月，Java事务API的开放源代码实现有：以上所有事务管理器都可以在Java 2平台标准版环境中使用。

