[
    {
        "substitutions": {
            "悳": "的"
        },
        "simplified_text": "Java事务API（Java Transaction API，简称JTA）是一个Java企业版的应用程序接口，在Java环境中，允许完成跨越多个XA资源的分布式事务。JTA是在Java社区过程下制定的规范，编号JSR 907。JTA提供：在X/Open XA的体系结构中，事务管理器或事务处理监控器（TP monitor）协调资源跨越多个资源，如数据库和消息队列，的事务。每一个资源都有自己的管理器。资源管理器通常拥有自己的用于操纵资源的API，例如关系型数据库使用的JDBC。此外，资源适配器允许事务管理器协调该资源管理器和其他资源管理器之间的分布式事务。最后，与事务管理器通讯的应用程序开始，提交，或回滚事务。应用程序同样需要使用资源自己的API与不同的资源通讯，修改资源。\nJTA API包括两个Java包下的类：\nJTA是以X/Open XA体系结构为基础设计的，但他定义了两种不同的事务边界划分的API。应用服务器，如EJB服务器，与应用组件区别对待。JTA提供了一个接口，这是供应用服务器自己进行开始，提交或回滚事务使用，同时还提供了另外一个接口，这是供一般客户代码，如Java Servlet或是EJB管理事务使用的。",
        "version": 1,
        "original": "Java事务API\nJava事务API（Java Transaction API，简称JTA ） 是一个Java企业版 的应用程序接口，在Java环境中，允许完成跨越多个XA资源的分布式事务。JTA是在Java社区过程下制定的规范，编号JSR 907。JTA提供：\n在X/Open XA的体系结构中，事务管理器或事务处理监控器 （TP monitor）协调 资源跨越多个资源，如数据库和消息队列，的事务。每一个资源都有自己的管理器。资源管理器通常拥有自己的用于操纵资源的API，例如关系型数据库使用的JDBC。 此外，资源适配器允许事务管理器协调该资源管理器和其他资源管理器之间的分布式事务。最后，与事务管理器通讯的应用程序开始，提交，或回滚事务。应用程序同样需要使用资源自己的API与不同的资源通讯，修改资源。\nJTA API包括两个Java包下的类：\nJTA是以X/Open XA体系结构为基础设计的，但他定义了两种不同的事务边界划分的API。应用服务器,如EJB服务器，与应用组件区别对待。JTA提供了一个接口，，这是供应用服务器自己进行开始，提交或回滚事务使用悳，同时还提供了另外一个接口，这是供一般客户代码，如Java Servlet或是EJB管理事务使用的。",
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "跨": "跨越"
        },
        "simplified_text": "JTA(机构名)是一个Java企业应用接口，允许Java环境完成跨越多个XA资源的分布式交易。JTA(机构名)是Java社区制定的JSR 907规范。它提供事务监控器协调跨越数据库和消息队列等资源的事务。每个资源有自己的管理器。资源管理器通常有自己的API，如JDBC。资源适配器帮助协调分布式事务。应用通过资源API与资源交互，修改资源。JTA(机构名) API包括两个Java包下的类。JTA(机构名)基于XA体系结构，定义了两种事务边界API，供EJB应用服务器和应用组件使用。",
        "version": 2,
        "original": "JTA(机构名)是一个Java企业应用接口，允许Java环境完成跨越多个XA资源的分布式交易。JTA(机构名)是Java社区制定的JSR 907规范。它提供事务监控器协调跨数据库和消息队列等资源的事务。每个资源有自己的管理器。资源管理器通常有自己的API，如JDBC。资源适配器帮助协调分布式事务。应用通过资源API与资源交互，修改资源。JTA(机构名) API包括两个Java包下的类。JTA(机构名)基于XA体系结构，定义了两种事务边界API，供EJB应用服务器和应用组件使用。",
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "若": "如果",
            "抛": "引发"
        },
        "simplified_text": "为了通过事务管理器管理，JTA架构要求每个资源管理器实现接口。如前面所说，每个资源都有自己的特定API，例如：Java事务API由三个部分组成。javax.transaction.UserTransaction接口让应用程序可以编程控制事务边界，它可供Java客户端程序或EJB使用。UserTransaction的begin方法开始一个全局事务，并与调用线程关联。事务到线程的管理由事务管理器完成，对应用程序来说是透明的。对嵌套事务的支持不是必须的。如果调用线程的环境与事务关联，而事务管理器不支持嵌套事务，UserTransaction的begin方法调用将引发NotSupportedException。底层的事务管理器实现负责在不同应用程序间传播事务环境，事务管理器位于客户端和服务器计算机上。传播的事务环境格式由客户端和服务器计算机协商确定。事务管理器若为JTS规范实现，则采用CORBA OTS 1.1规范描述的事务环境传播格式。事务环境的传播对应用程序来说是透明的。",
        "version": 2,
        "original": "为了通过事务管理器管理，JTA架构(框架结构)要求每个资源管理器实现接口。如前面所说，每个资源都有自己的特定API，例如：Java事务API由三个部分组成。javax.transaction.UserTransaction接口让应用程序可以编程(编制程序)控制事务边界，它可供Java客户端程序或EJB使用。UserTransaction的begin方法开始一个全局事务，并与调用线程关联。事务到线程的管理由事务管理器完成，对应用程序来说是透明的。对嵌套事务的支持不是必须的。若调用线程的环境与事务关联，而事务管理器不支持嵌套事务，UserTransaction的begin方法调用将抛出NotSupportedException。底层的事务管理器实现负责在不同应用程序间传播事务环境，事务管理器位于客户端和服务器计算机上。传播的事务环境格式由客户端和服务器计算机协商确定。事务管理器若为JTS规范实现，则采用CORBA OTS 1.1规范描述的事务环境传播格式。事务环境的传播对应用程序来说是透明的。",
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "类": "",
            "包": "",
            "与": "及",
            "供": "提供",
            "并": "和",
            "将": "要"
        },
        "simplified_text": "JTA是一个Java企业应用接口，它允许Java环境完成跨越多个XA资源的分布式交易。JTA由Java社区制定的JSR 907规范。该接口提供事务监控器，用于协调数据库和消息队列等资源的事务。每个资源都有其管理器，通常有自己的API，如JDBC。资源适配器负责协调分布式事务。应用通过资源API与资源交互，进行修改。JTA API包括两个Java包下的类。JTA基于XA体系结构，定义了两种事务边界API，供EJB应用服务器及应用组件使用。为了通过事务管理者进行管理，JTA规范要求每个资源实现特定的接口。例如，Java事务接口由三部分组成。UserTransaction接口允许应用程序控制事务范围，它适用于Java客户端或EJB。begin方法用于启动全局事务，并与调用线程绑定。事务与线程的管理由事务管理者负责，这一过程对应用程序来说是透明的。嵌套事务不是必需的。如果线程环境与事务关联，但事务管理者不支持嵌套事务，调用begin方法将引发不支持异常。",
        "version": 3,
        "original": "JTA是一个Java企业应用接口，它允许Java环境完成跨越多个XA资源的分布式交易。JTA由Java社区制定的JSR 907规范。该接口提供事务监控器，用于协调数据库和消息队列等资源的事务。每个资源都有其管理器，通常有自己的API，如JDBC。资源适配器负责协调分布式事务。应用通过资源API与资源交互，进行修改。JTA API包括两个Java包下的类。JTA基于XA体系结构，定义了两种事务边界API，供EJB应用服务器和应用组件使用。\n为了通过事务管理者进行管理，JTA规范要求每个资源实现特定的接口。例如，Java事务接口由三部分组成。UserTransaction接口允许应用程序控制事务范围，它适用于Java客户端或EJB。begin方法用于启动全局事务，并与调用线程绑定。事务与线程的管理由事务管理者负责，这一过程对应用程序来说是透明的。嵌套事务不是必需的。如果线程环境与事务关联，但事务管理者不支持嵌套事务，调用begin方法将引发不支持异常。",
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "与": "和",
            "则": "是"
        },
        "simplified_text": "底层事务管理者负责在不同应用间传播事务上下文，位于客户端和服务器上。事务上下文的传播由客户端和服务器协商确定。若事务管理者遵循JTS规范，则是采用CORBA OTS 1.1规范描述的事务上下文传播格式。这一传播过程对应用程序来说是透明的。\n企业JavaBeans服务器需要支持用户事务接口，以便Bean对象管理事务。通过EJB上下文的getUserTransaction方法，EJB组件可以获取到用户事务接口，这样应用程序无需直接与事务管理器交互，而是依赖EJB服务器提供的事务处理。EJB服务器与事务管理器的交互对应用是透明的。\n举例来说，会话Bean对象如何使用用户事务来管理事务。若环境中安装了Java事务API的实现，可从相关位置获取用户事务接口。Java应用程序使用Java事务API或用户事务的功能时，应用服务器并非必需。Java应用程序可以利用独立的Java事务API实现，该实现基于Java事务API/XA的可靠性。\n使用Spring工具时，提供了多种开发可靠Java应用程序的方法。到2010年4月，Java事务API的开放源代码实现有：以上所有事务管理器都可以在Java 2平台标准版环境中使用。",
        "version": 3,
        "original": "底层事务管理者负责在不同应用间传播事务上下文，位于客户端和服务器上。事务上下文的传播由客户端和服务器协商确定。若事务管理者遵循JTS规范，则采用CORBA OTS 1.1规范描述的事务上下文传播格式。这一传播过程对应用程序来说是透明的。\n企业JavaBeans服务器需要支持用户事务接口，以便Bean对象管理事务。通过EJB上下文的getUserTransaction方法，EJB组件可以获取到用户事务接口，这样应用程序无需直接与事务管理器交互，而是依赖EJB服务器提供的事务处理。EJB服务器与事务管理器的交互对应用是透明的。\n  举例来说，会话Bean对象如何使用用户事务来管理事务。若环境中安装了Java事务API的实现，可从相关位置获取用户事务接口。Java应用程序使用Java事务API或用户事务的功能时，应用服务器并非必需。Java应用程序可以利用独立的Java事务API实现，该实现基于Java事务API/XA的可靠性。\n  使用Spring工具时，提供了多种开发可靠Java应用程序的方法。到2010年4月，Java事务API的开放源代码实现有：以上所有事务管理器都可以在Java 2平台标准版环境中使用。",
        "chunk_num": 2,
        "type": "Wiki"
    }
]