[
    {
        "substitutions": {
            "Java事务API（Java Transaction API，简称JTA）": "JTA",
            "Java企业版": "Java企业应用",
            "分布式事务": "分布式交易",
            "X/Open XA": "XA",
            "事务管理器或事务处理监控器（TP monitor）": "事务监控器",
            "资源管理器": "资源管理",
            "关系型数据库使用的JDBC": "JDBC",
            "资源适配器": "资源适配",
            "应用程序": "应用",
            "EJB服务器": "EJB应用服务器",
            "Java Servlet": "Java Servlet",
            "EJB管理事务": "EJB事务管理"
        },
        "simplified_text": "JTA(机构名)是一个Java企业应用接口，允许Java环境完成跨越多个XA资源的分布式交易。JTA(机构名)是Java社区制定的JSR 907规范。它提供事务监控器协调跨数据库和消息队列等资源的事务。每个资源有自己的管理器。资源管理器通常有自己的API，如JDBC。资源适配器帮助协调分布式事务。应用通过资源API与资源交互，修改资源。JTA(机构名) API包括两个Java包下的类。JTA(机构名)基于XA体系结构，定义了两种事务边界API，供EJB应用服务器和应用组件使用。",
        "original": "Java事务API（Java Transaction API，简称JTA）是一个Java企业版的应用程序接口，在Java环境中，允许完成跨越多个XA资源的分布式事务。JTA是在Java社区过程下制定的规范，编号JSR 907。JTA提供：在X/Open XA的体系结构中，事务管理器或事务处理监控器（TP monitor）协调资源跨越多个资源，如数据库和消息队列，的事务。每一个资源都有自己的管理器。资源管理器通常拥有自己的用于操纵资源的API，例如关系型数据库使用的JDBC。此外，资源适配器允许事务管理器协调该资源管理器和其他资源管理器之间的分布式事务。最后，与事务管理器通讯的应用程序开始，提交，或回滚事务。应用程序同样需要使用资源自己的API与不同的资源通讯，修改资源。\nJTA API包括两个Java包下的类：\nJTA是以X/Open XA体系结构为基础设计的，但他定义了两种不同的事务边界划分的API。应用服务器，如EJB服务器，与应用组件区别对待。JTA提供了一个接口，这是供应用服务器自己进行开始，提交或回滚事务使用，同时还提供了另外一个接口，这是供一般客户代码，如Java Servlet或是EJB管理事务使用的。",
        "version": 1,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "上下文": "环境"
        },
        "simplified_text": "为了通过事务管理器管理，JTA架构(框架结构)要求每个资源管理器实现接口。如前面所说，每个资源都有自己的特定API，例如：Java事务API由三个部分组成。javax.transaction.UserTransaction接口让应用程序可以编程(编制程序)控制事务边界，它可供Java客户端程序或EJB使用。UserTransaction的begin方法开始一个全局事务，并与调用线程关联。事务到线程的管理由事务管理器完成，对应用程序来说是透明的。对嵌套事务的支持不是必须的。如果调用线程的环境已经与事务关联，并且事务管理器的实现不支持嵌套事务，UserTransaction的begin方法调用时将抛出NotSupportedException。底层的事务管理器实现负责在不同应用程序间传播事务环境，事务管理器位于客户端和服务器计算机上。传播的事务环境格式由客户端和服务器计算机协商确定。例如，如果事务管理器是JTS规范的实现，将使用CORBA OTS 1.1规范中描述的事务环境传播格式。事务环境的传播对应用程序来说是透明的。",
        "original": "为了通过事务管理器管理，JTA架构要求每一个资源管理器必须实现接口，如前面所述，每一个资源会有一个自己的特定的API，例如：\nJava事务API由三个部分组成：\njavax.transaction.UserTransaction接口给应用程序提供了编程控制事务边界的能力。该接口可以供Java客户端程序或EJB使用。\nUserTransaction的begin方法开始一个全局事务，并将该事务与调用线程关联。事务到线程的管理是由事务管理器完成的，对应用程序透明的。\n对嵌套事务的支持不是必须的。如果调用线程的上下文已经与事务关联，并且事务管理器的实现并不支持嵌套的事务，UserTransaction的begin方法调用时将抛出NotSupportedException。\n底层的事务管理器的实现负责提供不同应用程序间事务上下文的传播，事务管理器位于客户端和服务器计算机上。\n传播的事务上下文的格式由客户端和服务器计算机协商确定。例如，如果事务管理器是JTS规范的实现，将使用CORBA OTS 1.1规范中描述的事务上下文传播格式。事务上下文的传播对于应用程序来说是透明的。",
        "version": 1,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "构件": "单元",
            "交互": "互动"
        },
        "simplified_text": "EJB服务器需要支持UserTransaction(机构名)接口，以便Bean(机构名)管理事务的EJB使用。通过EJBContext的getUserTransaction(机构名)方法，EJB单元可以获取到UserTransaction(机构名)接口。这样，EJB应用程序不需要直接与事务管理器交互，就可以确定事务边界。而是依赖于EJB服务器提供EJB规范中定义的所有事务处理。（EJB服务器和事务管理器之间的互动对应用是透明的。实现事务管理的责任在EJB容器和服务提供商。）\n下面举例说明Bean(机构名)管理事务的会话Bean(机构名)如何使用UserTransaction(机构名)：\n如果环境中安装了JTA(机构名)的实现，可以从codice_1获取UserTransaction(机构名)。\n要使用JTA(机构名)或UserTransaction(机构名)的功能，应用服务器并非必需。现在有独立的JTA(机构名)实现，这使得普通的Java应用程序也能利用JTA(机构名)/XA的可靠性。特别是在与Spring工具一起使用时，这为开发可靠的Java应用程序提供了不同的方法。\n到2010年4月，JTA(机构名)的开源实现有：\n以上所有事务管理器都可以在J2SE环境中使用。",
        "original": "，EJB服务器需要支持UserTransaction接口，以供Bean管理事务的EJB使用。通过EJBContext的getUserTransaction方法，EJB构件可以获取到UserTransaction接口。这样，EJB应用程序不需要与事务管理器直接交互，就可以划分事务边界。取而代之的是EJB依赖于EJB服务器提供EJB规范中定义的所有事务处理。（EJB服务器和事务管理器之间的交互对于应用是透明。实现事务管理的责任是在EJB容器和服务的提供商。）\n下面的例子说明了Bean管理事务的会话Bean如何使用UserTransaction：\n如果环境中安装了JTA的实现，应可以从codice_1获取UserTransaction。\n要使用JTA或UserTransaction提供的功能，应用服务器并不是必需的。 现存在独立的JTA实现，这样，在普通的Java应用程序中都可以利用JTA/XA带来的可靠性。特别是在与类似Spring工具一同使用的时候，这为开发可靠的Java应用程序提供了不同的范式。\n到2010年4月为止，JTA的开源实现有：\n以上所有事务管理器可以在J2SE环境中使用。",
        "version": 1,
        "chunk_num": 3,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "JTA架构": "JTA规范",
            "资源管理器": "资源",
            "特定API": "特定接口",
            "Java事务API": "Java事务接口",
            "javax.transaction.UserTransaction": "UserTransaction接口",
            "编程控制": "控制",
            "事务边界": "事务范围",
            "Java客户端程序": "Java客户端",
            "EJB": "EJB组件",
            "begin方法": "begin方法",
            "全局事务": "全局事务",
            "线程关联": "线程绑定",
            "事务管理器": "事务管理者",
            "嵌套事务": "嵌套事务",
            "NotSupportedException": "不支持异常",
            "底层的事务管理器实现": "底层事务管理者",
            "应用程序间": "应用间",
            "JTS规范": "JTS规范",
            "CORBA OTS 1.1规范": "CORBA OTS 1.1规范",
            "事务环境": "事务上下文",
            "透明": "透明"
        },
        "simplified_text": "为了通过事务管理者管理，JTA规范要求每个资源实现接口。如前所述，每个资源有特定的接口，例如：Java事务接口由三部分组成。UserTransaction接口让应用程序控制事务范围，它可用于Java客户端或EJB。begin方法启动全局事务，与调用线程绑定。事务与线程的管理由事务管理者负责，对应用程序来说是透明的。嵌套事务不是必需的。如果线程环境与事务关联，而事务管理者不支持嵌套事务，调用begin方法将引发不支持异常。底层事务管理者负责在不同应用间传播事务上下文，事务管理者位于客户端和服务器上。事务上下文的传播由客户端和服务器协商确定。若事务管理者遵循JTS规范，则采用CORBA OTS 1.1规范描述的事务上下文传播格式。事务上下文的传播对应用程序来说是透明的。",
        "original": "为了通过事务管理器管理，JTA架构要求每个资源管理器实现接口。如前面所说，每个资源都有自己的特定API，例如：Java事务API由三个部分组成。javax.transaction.UserTransaction接口让应用程序可以编程控制事务边界，它可供Java客户端程序或EJB使用。UserTransaction的begin方法开始一个全局事务，并与调用线程关联。事务到线程的管理由事务管理器完成，对应用程序来说是透明的。对嵌套事务的支持不是必须的。如果调用线程的环境与事务关联，而事务管理器不支持嵌套事务，UserTransaction的begin方法调用将引发NotSupportedException。底层的事务管理器实现负责在不同应用程序间传播事务环境，事务管理器位于客户端和服务器计算机上。传播的事务环境格式由客户端和服务器计算机协商确定。事务管理器若为JTS规范实现，则采用CORBA OTS 1.1规范描述的事务环境传播格式。事务环境的传播对应用程序来说是透明的。",
        "version": 2,
        "chunk_num": 2,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "EJB": "企业JavaBeans",
            "UserTransaction": "用户事务",
            "Bean": "Bean对象",
            "EJBContext": "EJB上下文",
            "EJB单元": "EJB组件",
            "事务管理器": "事务管理器",
            "JTA": "Java事务API",
            "J2SE": "Java 2平台标准版",
            "开源": "开放源代码"
        },
        "simplified_text": "企业JavaBeans服务器需要支持用户事务接口，以便Bean对象管理事务。通过EJB上下文的getUserTransaction方法，EJB组件可以获取到用户事务接口。这样，EJB应用程序不需要直接与事务管理器交互，就能确定事务边界。而是依赖于EJB服务器提供的事务处理。EJB服务器和事务管理器之间的交互对应用是透明的。实现事务管理的责任在EJB容器和服务提供商。下面举例说明Bean对象管理事务的会话Bean对象如何使用用户事务：如果环境中安装了Java事务API的实现，可以从相关位置获取用户事务接口。要使用Java事务API或用户事务的功能，应用服务器并非必需。现在有独立的Java事务API实现，这使得Java应用程序能利用Java事务API/XA的可靠性。使用Spring工具时，提供了开发可靠Java应用程序的不同方法。到2010年4月，Java事务API的开放源代码实现有：以上所有事务管理器都可以在Java 2平台标准版环境中使用。",
        "original": "EJB服务器需要支持UserTransaction(机构名)接口，以便Bean(机构名)管理事务的EJB使用。通过EJBContext的getUserTransaction(机构名)方法，EJB单元可以获取到UserTransaction(机构名)接口。这样，EJB应用程序不需要直接与事务管理器交互，就可以确定事务边界。而是依赖于EJB服务器提供EJB规范中定义的所有事务处理。（EJB服务器和事务管理器之间的互动对应用是透明的。实现事务管理的责任在EJB容器和服务提供商。）下面举例说明Bean(机构名)管理事务的会话Bean(机构名)如何使用UserTransaction(机构名)：如果环境中安装了JTA(机构名)的实现，可以从codice_1获取UserTransaction(机构名)。要使用JTA(机构名)或UserTransaction(机构名)的功能，应用服务器并非必需。现在有独立的JTA实现，这使得Java应用程序能利用JTA/XA的可靠性。使用Spring工具时，提供了开发可靠Java应用程序的不同方法。到2010年4月，JTA(机构名)的开源实现有：以上所有事务管理器都可以在J2SE环境中使用。",
        "version": 2,
        "chunk_num": 3,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "引发": "",
            "JTA": "Java接口",
            "Java企业应用接口": "Java企业接口",
            "跨越": "跨越",
            "多个XA资源": "多个XA资源",
            "分布式交易": "分布式交易",
            "Java社区制定的JSR 907规范": "JSR 907规范",
            "事务监控器": "事务监控器",
            "协调": "协调",
            "消息队列": "消息队列",
            "资源适配器": "资源适配器",
            "Java包下的类": "Java包中的类",
            "XA体系结构": "XA结构",
            "事务边界API": "事务边界API",
            "EJB应用服务器": "EJB服务器",
            "应用组件": "应用组件",
            "事务管理者": "事务管理者",
            "Java事务接口": "Java事务接口",
            "UserTransaction接口": "UserTransaction接口",
            "Java客户端或EJB": "Java客户端或EJB",
            "begin方法": "begin方法",
            "绑定": "绑定",
            "嵌套事务": "嵌套事务",
            "线程环境": "线程环境",
            "事务管理者不支持嵌套事务": "事务管理者不支持嵌套事务",
            "不支持异常": "不支持异常"
        },
        "simplified_text": "Java接口JTA(机构名)允许Java环境完成分布式交易，跨越多个XA资源。它遵循JSR 907规范，提供事务监控器来协调数据库和消息队列等资源的事务。每个资源有自己的管理器，如JDBC，资源适配器协调分布式事务。应用通过资源API与资源交互进行修改。JTA(机构名) API包括Java包中的类。JTA(机构名)基于XA结构，定义了两种事务边界API，供EJB(机构名)服务器和应用组件使用。JTA(机构名)规范要求每个资源实现特定接口。Java事务接口由UserTransaction接口等组成，允许应用程序控制事务范围，适用于Java客户端或EJB(机构名)。begin方法启动全局事务并与线程绑定。事务与线程的管理由事务管理者负责，对应用程序透明。嵌套事务不是必需的。若线程环境与事务关联，但事务管理者不支持嵌套事务，调用begin方法将引发异常。",
        "original": "JTA是一个Java企业应用接口，它允许Java环境完成跨越多个XA资源的分布式交易。JTA由Java社区制定的JSR 907规范。该接口提供事务监控器，用于协调数据库和消息队列等资源的事务。每个资源都有其管理器，通常有自己的API，如JDBC。资源适配器负责协调分布式事务。应用通过资源API与资源交互，进行修改。JTA API包括两个Java包下的类。JTA基于XA体系结构，定义了两种事务边界API，供EJB应用服务器及应用组件使用。为了通过事务管理者进行管理，JTA规范要求每个资源实现特定的接口。例如，Java事务接口由三部分组成。UserTransaction接口允许应用程序控制事务范围，它适用于Java客户端或EJB。begin方法用于启动全局事务，并与调用线程绑定。事务与线程的管理由事务管理者负责，这一过程对应用程序来说是透明的。嵌套事务不是必需的。如果线程环境与事务关联，但事务管理者不支持嵌套事务，调用begin方法将引发不支持异常。",
        "version": 3,
        "chunk_num": 1,
        "type": "Wiki"
    },
    {
        "substitutions": {
            "会话": "对话",
            "遵循": "遵照"
        },
        "simplified_text": "底层事务管理者负责在不同应用间传播事务上下文，位于客户端和服务器上。事务上下文的传播由客户端和服务器协商确定。若事务管理者遵照JTS规范，则是采用CORBA OTS 1.1规范描述的事务上下文传播格式。这一传播过程对应用程序来说是透明的。企业JavaBeans服务器需要支持用户事务接口，以便Bean对象管理事务。通过EJB上下文的getUserTransaction方法，EJB组件可以获取到用户事务接口，这样应用程序无需直接与事务管理器交互，而是依赖EJB服务器提供的事务处理。EJB服务器与事务管理器的交互对应用是透明的。以对话形式说明会话Bean对象如何使用用户事务来管理事务。若环境中安装了Java事务API的实现，可从相关位置获取用户事务接口。Java应用程序使用Java事务API或用户事务的功能时，应用服务器并非必需。Java应用程序可以利用独立的Java事务API实现，该实现基于Java事务API/XA的可靠性。使用Spring工具时，提供了多种开发可靠Java应用程序的方法。到2010年4月，Java事务API的开放源代码实现有：以上所有事务管理器都可以在Java 2平台标准版环境中使用。",
        "original": "底层事务管理者负责在不同应用间传播事务上下文，位于客户端和服务器上。事务上下文的传播由客户端和服务器协商确定。若事务管理者遵循JTS规范，则是采用CORBA OTS 1.1规范描述的事务上下文传播格式。这一传播过程对应用程序来说是透明的。\n企业JavaBeans服务器需要支持用户事务接口，以便Bean对象管理事务。通过EJB上下文的getUserTransaction方法，EJB组件可以获取到用户事务接口，这样应用程序无需直接与事务管理器交互，而是依赖EJB服务器提供的事务处理。EJB服务器与事务管理器的交互对应用是透明的。\n举例来说，会话Bean对象如何使用用户事务来管理事务。若环境中安装了Java事务API的实现，可从相关位置获取用户事务接口。Java应用程序使用Java事务API或用户事务的功能时，应用服务器并非必需。Java应用程序可以利用独立的Java事务API实现，该实现基于Java事务API/XA的可靠性。\n使用Spring工具时，提供了多种开发可靠Java应用程序的方法。到2010年4月，Java事务API的开放源代码实现有：以上所有事务管理器都可以在Java 2平台标准版环境中使用。",
        "version": 3,
        "chunk_num": 2,
        "type": "Wiki"
    }
]